apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'org.robolectric'

dependencies {

    compile 'com.google.android.gms:play-services-analytics:7.3.0'
    compile 'com.google.android.gms:play-services-location:7.3.0'

    compile 'com.android.support:support-v4:22.1.1'
    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.android.support:cardview-v7:21.0.0'
    compile 'com.android.support:recyclerview-v7:21.0.2'

    compile files('libs/j2xx.jar')
    compile files('libs/jeromq-0.3.4.jar')
    compile files('libs/droneapi-java.jar')
    compile files('libs/protobuf-java-2.5.0.jar')

    compile project(':ClientLib')
    compile project(':dependencyLibs:Core')
    compile project(':dependencyLibs:usb-serial-for-android:UsbSerialLibrary')
    compile('com.crashlytics.sdk.android:crashlytics:2.2.2@aar') {
        transitive = true;
    }

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:2.4'
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId 'org.droidplanner.services.android'
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 10219
        versionName getGitVersion()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        test {
            java.srcDirs = ['test/java']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    signingConfigs {
        release {
            storeFile getAppKeystoreFile()
            storePassword getAppKeystorePassword()
            keyAlias getAppKey()
            keyPassword getAppKeyPassword()
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            if (file != null && file.name.endsWith('.apk')) {
                def buildType = variant.buildType.getName()
                def versionCode = defaultConfig.versionCode
                output.outputFile = new File(file.parent, "3dr-services-${buildType}.${versionCode}.apk")
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    //FIXME: Remove when lint errors are taken care of.
    lintOptions {
        abortOnError false
    }
}

/**
 * @return The most recent git tag to be used as version name for the app.
 */
def getGitVersion() {
    def cmd = "git describe --tag"
    try {
        def proc = cmd.execute()
        return proc.text.trim()
    } catch (IOException e) {
        //Unable to find 'git'
        return "please update version name manually"
    }
}

def getAppKeystoreFile() {
    def filePath = hasProperty('COM_O3DR_SERVICES_KEYSTORE') ? COM_O3DR_SERVICES_KEYSTORE : null
    return filePath ? file(filePath) : null
}

def getAppKeystorePassword(){
    return hasProperty('COM_O3DR_SERVICES_KEYSTORE_PWD') ? COM_O3DR_SERVICES_KEYSTORE_PWD : ''
}

def getAppKeyPassword() {
    return hasProperty('COM_O3DR_SERVICES_KEY_PWD') ? COM_O3DR_SERVICES_KEY_PWD : ''
}

def getAppKey() {
    return hasProperty('COM_O3DR_SERVICES_KEY_ALIAS') ? COM_O3DR_SERVICES_KEY_ALIAS : ''
}